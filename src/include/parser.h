#pragma once 

/**
 *  @brief parser functions that parse the tokens generated by the lexer and with that creates an Abstract syntax tree
 */

#include "cstr.h"
#include "strvec.h"
#include "lexer.h"
#include "ast.h"
#include "console.h"
#include "debug.h"

Ast *parse(svector *tokens);
void parse_(svector *tokens,  AstNode *node);
/*  returns the char of the operator before the pointer, ie: in case the input was '1*2+1' and the pointer
    was at '+' it would return '*' as the operator used before the pointer is '*'
*/
char get_before_operator(svector *tokens, int index);
/*  returns the char of the operator after the pointer, ie: in case the input was '1+1*2' and the pointer
    was at '+' it would return '*' as the operator used after the pointer is '*'
*/
char get_after_operator(svector *tokens, int index);

int get_direction(char before, char after, svector *tokens);